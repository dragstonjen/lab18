import json
import os
import logging
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = "TOKEN"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üîß –í–∫–∞–∑—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
NOTES_FILE = "–ü–£–¢–¨"  # –∑–∞–º—ñ–Ω–∏ —à–ª—è—Ö 

def load_notes():
    try:
        if os.path.exists(NOTES_FILE):
            with open(NOTES_FILE, "r", encoding="utf-8") as f:
                notes = json.load(f)
                print("üìñ –ù–æ—Ç–∞—Ç–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
                return notes
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
    return {}

def save_notes(notes):
    try:
        with open(NOTES_FILE, "w", encoding="utf-8") as f:
            json.dump(notes, f, ensure_ascii=False, indent=2)
            print("üíæ –ù–æ—Ç–∞—Ç–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    await message.reply(
        "/start ‚Äî –ø–æ—á–∞—Ç–∏\n"
        "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n"
        "/info ‚Äî –ø—Ä–æ –±–æ—Ç–∞\n"
        "/exit ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏\n"
        "/add_note <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É\n"
        "/list_notes ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏\n"
        "/delete_notes ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏"
    )

@dp.message_handler(commands=["info"])
async def info_cmd(message: types.Message):
    await message.reply("–Ø –∑–±–µ—Ä—ñ–≥–∞—é –Ω–æ—Ç–∞—Ç–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π JSON-—Ñ–∞–π–ª. –í—Å—ñ –¥–∞–Ω—ñ –ª–∏—à–∞—é—Ç—å—Å—è –Ω–∞ –≤–∞—à–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ.")

@dp.message_handler(commands=["exit"])
async def exit_cmd(message: types.Message):
    await message.reply("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! üëã")

@dp.message_handler(commands=["add_note"])
async def add_note_cmd(message: types.Message):
    notes = load_notes()
    user_id = str(message.from_user.id)
    note_text = message.get_args().strip()

    if not note_text:
        await message.reply("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")
        return

    notes.setdefault(user_id, []).append(note_text)
    save_notes(notes)
    await message.reply("‚úÖ –ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

@dp.message_handler(commands=["list_notes"])
async def list_notes_cmd(message: types.Message):
    notes = load_notes()
    user_id = str(message.from_user.id)
    user_notes = notes.get(user_id, [])

    if not user_notes:
        await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.")
    else:
        note_list = "\n".join(f"{i+1}. {n}" for i, n in enumerate(user_notes))
        await message.reply("üóí –í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏:\n" + note_list)

@dp.message_handler(commands=["delete_notes"])
async def delete_notes_cmd(message: types.Message):
    notes = load_notes()
    user_id = str(message.from_user.id)

    if user_id in notes:
        del notes[user_id]
        save_notes(notes)
        await message.reply("üóë –£—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ –±—É–ª–æ –Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
